#!/usr/bin/env bash

# set -e: exit asap if a command exits with a non-zero status
set -e

###################
# Echo with Error #
###################
echoerr() { printf "%s\n" "$*" >&2; }

########################
# Print error and exit #
########################
die () {
  echoerr "ERROR: $1"
  # if $2 is defined AND NOT EMPTY, use $2; otherwise, set to "160"
  errnum=${2-160}
  exit $errnum
}

#######################################
# Docker login, tag and push selenium #
#######################################
docker_login_tag_push() {
  echo "script_push::docker_login_tag_push"

  [ "${DOCKER_USERNAME}" == "" ] && die "Need env var DOCKER_USERNAME to push to docker"
  [ "${DOCKER_PASSWORD}" == "" ] && die "Need env var DOCKER_PASSWORD to push to docker"

  docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
  echo "Logged in to docker with user '${DOCKER_USERNAME}'"
  echo "docker tag and docker push using TRAVIS_TAG=${TRAVIS_TAG}"
  docker tag selenium:latest elgalu/selenium:${TRAVIS_TAG}
  docker tag selenium:latest elgalu/selenium:latest

  # e.g. TAG_VERSION_MAJOR="3"
  TAG_VERSION_MAJOR="${TRAVIS_TAG::1}"
  echo "TAG_VERSION_MAJOR=${TAG_VERSION_MAJOR}"
  docker tag selenium:latest elgalu/selenium:${TAG_VERSION_MAJOR}
  # e.g. TAG_VERSION_MAJ_MINOR="3.3"
  TAG_VERSION_MAJ_MINOR="${TRAVIS_TAG::3}"
  echo "TAG_VERSION_MAJ_MINOR=${TAG_VERSION_MAJ_MINOR}"
  docker tag selenium:latest elgalu/selenium:${TAG_VERSION_MAJ_MINOR}
  # e.g. TAG_VERSION_MAJ_MIN_PATCH="3.3.1"
  TAG_VERSION_MAJ_MIN_PATCH="${TRAVIS_TAG::5}"
  echo "TAG_VERSION_MAJ_MIN_PATCH=${TAG_VERSION_MAJ_MIN_PATCH}"
  docker tag selenium:latest elgalu/selenium:${TAG_VERSION_MAJ_MIN_PATCH}

  # Push them all
  docker push elgalu/selenium:${TAG_VERSION_MAJOR}
  docker push elgalu/selenium:${TAG_VERSION_MAJ_MINOR}
  docker push elgalu/selenium:${TAG_VERSION_MAJ_MIN_PATCH}
  docker push elgalu/selenium:${TRAVIS_TAG} | tee docker_push.log

  if [ "${DOCKER_PUSH_LATEST}" != "true" ]; then
    echo "DOCKER_PUSH_LATEST is false (probably a beta release) so don't update tag ':latest'"
  else
    docker push elgalu/selenium:latest
  fi
  # Update Docker README.md badges
  curl -XPOST "https://hooks.microbadger.com/images/elgalu/selenium/2blr1ujGSTcUtm3HnU0-h5m6yLY=" || true
}

#################################
# Git config name, email, stuff #
#################################
git_config() {
  echo "script_push::git_config"
  git config --global push.default simple
  git config --global user.name "Leo Gallucci Bot"
  git config --global user.email "elgalu3+bot@gmail.com"
}

################################################
# Git create branch, merge, keep local changes #
################################################
git_co_fetch_merge_stash() {
  echo "script_push::git_co_fetch_merge_stash"
  git checkout -b travis-${TRAVIS_TAG}
  git remote add github "https://elgalubot:${GH_TOKEN}@github.com/elgalu/docker-selenium.git"
  git fetch github
  git stash save || true
  git checkout -t github/master -b github/master
  echo "Will git merge into master"
  if ! timeout --foreground "30s" git merge travis-${TRAVIS_TAG}; then
    echo "WARN: Timed out on git merge!" 1>&2
  fi
  git stash pop || true
}

#########################
# Update the Change log #
#########################
changelog_update_TBD() {
  #-----------------------------------
  rm -f NEXT_RELEASE.md
  cp TBD_DOCKER_TAG.md NEXT_RELEASE.md
  #-----------------------------------

  TBD_DOCKER_TAG=${TRAVIS_TAG}
  TBD_PREV_COM$(grep -Po '(?<=## )([a-z0-9\.-]+)' CHANGELOG.md | head -n 1)

  # TODO: replace TBD_COMMIT_MSG

  TBD_DIGEST=$(grep -Po '(?<=digest: )([a-z0-9:]+)' docker_push.log) \
    || die "while trying to get TBD_DIGEST"
  TBD_IMAGE_ID=$(docker inspect -f='{{.Id}}' elgalu/selenium:${TRAVIS_TAG}) \
    || die "while trying to get TBD_IMAGE_ID"
  TBD_IMAGE_SIZE=$(docker images --format "{{.Size}}" selenium) \
    || die "while trying to get TBD_IMAGE_SIZE"
  TBD_DOCKER_VERS=$(docker --version 2>&1 | grep -Po '(?<=version )([a-z0-9\.]+)') \
    || die "while trying to get TBD_DOCKER_VERS"
  TBD_DOCKER_BUILD=$(docker --version 2>&1 | grep -Po '(?<=build )([a-z0-9\.]+)') \
    || die "while trying to get TBD_DOCKER_BUILD"
  TBD_DOCKER_COMPOSE_VERS=$(docker-compose --version 2>&1 | grep -Po '(?<=version )([a-z0-9\.]+)') \
    || die "while trying to get TBD_DOCKER_COMPOSE_VERS"
  TBD_DOCKER_COMPOSE_BUILD=$(docker-compose --version 2>&1 | grep -Po '(?<=build )([a-z0-9\.]+)') \
    || die "while trying to get TBD_DOCKER_COMPOSE_BUILD"
  uname -rm 2>&1 >uname_rm.log || true
  TBD_HOST_UNAME=$(cat uname_rm.log) \
    || die "while trying to get TBD_HOST_UNAME"
  rm -f uname_rm.log
  TBD_DATE=$(date +%F) \
    || die "while trying to get TBD_DATE"
  TBD_CHROME_STABLE=$(docker exec grid chrome_stable_version) \
    || die "while trying to get TBD_CHROME_STABLE"
  TBD_CHROME_DRIVER=$(docker exec grid chromedriver_version) \
    || die "while trying to get TBD_CHROME_DRIVER"
  TBD_GECKO_DRIVER=$(docker exec grid geckodriver_version) \
    || die "while trying to get TBD_GECKO_DRIVER"
  TBD_CHROMEDRIVER_COMMIT=$(docker exec grid chromedriver_commit_version) \
    || die "while trying to get TBD_CHROMEDRIVER_COMMIT"
  TBD_FIREFOX_VERSION=$(docker exec grid firefox_version) \
    || die "while trying to get TBD_FIREFOX_VERSION"
  TBD_SELENIUM_VERSION=$(docker exec grid selenium_version) \
    || die "while trying to get TBD_SELENIUM_VERSION"
  TBD_SELENIUM_REVISION=$(docker exec grid selenium_revision_version) \
    || die "while trying to get TBD_SELENIUM_REVISION"
  TBD_PYTHON_VERSION=$(docker exec grid python_version) \
    || die "while trying to get TBD_PYTHON_VERSION"
  TBD_JAVA_BUILD=$(docker exec grid java_build_version) \
    || die "while trying to get TBD_JAVA_BUILD"
  TBD_JAVA_VENDOR=$(docker exec grid java_vendor_version) \
    || die "while trying to get TBD_JAVA_VENDOR"
  TBD_TIME_ZONE="$(docker exec grid printenv TZ | sed -r 's/[\/]+/\\\//g')" \
    || die "while trying to get TBD_TIME_ZONE"
  UBUNTU_FLAVOR=$(docker exec grid cat UBUNTU_FLAVOR) \
    || die "while trying to get UBUNTU_FLAVOR"
  UBUNTU_DATE=$(docker exec grid cat UBUNTU_DATE) \
    || die "while trying to get UBUNTU_DATE"

  sed -i -- "s/TBD_DOCKER_TAG/${TBD_DOCKER_TAG}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_DIGEST/${TBD_DIGEST}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_IMAGE_ID/${TBD_IMAGE_ID}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_IMAGE_SIZE/${TBD_IMAGE_SIZE}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_DOCKER_VERS/${TBD_DOCKER_VERS}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_DOCKER_BUILD/${TBD_DOCKER_BUILD}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_DOCKER_COMPOSE_VERS/${TBD_DOCKER_COMPOSE_VERS}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_DOCKER_COMPOSE_BUILD/${TBD_DOCKER_COMPOSE_BUILD}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_HOST_UNAME/${TBD_HOST_UNAME}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_DATE/${TBD_DATE}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_CHROME_STABLE/${TBD_CHROME_STABLE}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_CHROME_DRIVER/${TBD_CHROME_DRIVER}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_GECKO_DRIVER/${TBD_GECKO_DRIVER}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_CHROMEDRIVER_COMMIT/${TBD_CHROMEDRIVER_COMMIT}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_FIREFOX_VERSION/${TBD_FIREFOX_VERSION}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_SELENIUM_VERSION/${TBD_SELENIUM_VERSION}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_SELENIUM_REVISION/${TBD_SELENIUM_REVISION}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_PYTHON_VERSION/${TBD_PYTHON_VERSION}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_JAVA_BUILD/${TBD_JAVA_BUILD}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_JAVA_VENDOR/${TBD_JAVA_VENDOR}/g" NEXT_RELEASE.md || true
  sed -i -- "s/TBD_TIME_ZONE/${TBD_TIME_ZONE}/g" NEXT_RELEASE.md || true
  sed -i -- "s/UBUNTU_FLAVOR/${UBUNTU_FLAVOR}/g" NEXT_RELEASE.md || true
  sed -i -- "s/UBUNTU_DATE/${UBUNTU_DATE}/g" NEXT_RELEASE.md || true
}

#########################
# Update the Change log #
#########################
update_changelog() {
  echo "script_push::update_changelog"
  changelog_update_TBD
}

####################################
# Git add and commit local changes #
####################################
git_diff_add_commit() {
  echo "script_push::git_diff_add_commit"
  # set -e: exit asap if a command exits with a non-zero status
  # set -x: print each command right before it is executed
  set -xe
  git --no-pager diff --unified=0 CHANGELOG.md
  git status
  git add CHANGELOG.md
  git add capabilities.json
  git add images/grid3_console.png
  git commit -m "${TRAVIS_TAG}: Update image id, digest & png [ci skip]"
  git --no-pager log -n3
  git branch
}

#########################
# Git push changes, tag #
#########################
git_push_tag_push() {
  echo "script_push::git_push_tag_push"
  if git push github HEAD:master >git_push_master.log 2>&1; then \
    failed=false; else failed=true; fi
  # hide secrets
  sed -i -- "s/${GH_TOKEN}/\[SECRET\]/g" git_push_master.log || true
  if [ ${failed} == "true" ]; then
    echoerr "Failed to git push to master!"
    cat git_push_master.log 1>&2
    exit 1
  else
    cat git_push_master.log
  fi

  git tag -f latest
  if git push --tags -f >git_push_tags.log 2>&1; then \
    failed=false; else failed=true; fi
  # hide secrets
  sed -i -- "s/${GH_TOKEN}/\[SECRET\]/g" git_push_tags.log || true
  if [ ${failed} == "true" ]; then
    echoerr "Failed to push git tags!"
    cat git_push_master.log 1>&2
    exit 2
  else
    cat git_push_master.log
  fi
}

#####################################################
# Docker run `grid` so we can fetch actual versions #
#####################################################
ensure_docker_run_dosel() {
  if [[ $(docker ps -f "name=grid" --format '{{.Names}}') != "grid" ]]; then
    docker run --name=grid -d selenium
    docker exec grid wait_all_done 40s
  fi
}

########
# Main #
########
if [ "${TRAVIS_PULL_REQUEST}" == "true" ]; then
  echo "This is a pull request so no docker push."
elif [ "${DOCKER_PUSH}" != "true" ]; then
  echo "DOCKER_PUSH is not 'true' so will not docker push."
elif [ "${TRAVIS_TAG}" != "latest" ] && [ "${TRAVIS_TAG}" != "" ]; then
  docker_login_tag_push
  git_config
  git_co_fetch_merge_stash
  ensure_docker_run_dosel
  update_changelog
  git_diff_add_commit
  git_push_tag_push
else
  echo "This is not git tagged so no version push to docker"
fi

# New available env var:
# https://github.com/travis-ci/docs-travis-ci-com/blob/gh-pages/user/environment-variables.md
#  TRAVIS_PULL_REQUEST_BRANCH: If the current job is a pull request, the name of the branch from which the PR orginated
